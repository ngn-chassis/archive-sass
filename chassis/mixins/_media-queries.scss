// NGN Chassis
// Media Query Mixins --------------------------------------------------------
/*

Viewport Width-specific styles can be applied in 5 different ways:

  1. Targeting all Viewport Width Ranges below the specified range:

    ```SASS
    @include below-viewport-width(medium) {
      -- your styles --
    }
    ```

    This will target viewport widths below, but not including, the lower bound
    of the "medium" Viewport Width Range

    By default, the above code would affect viewports 0px - 767px wide:
    ✓ below minimum UI
    ✓ tiny
    ✓ small
    ✘ medium
    ✘ large
    ✘ huge
    ✘ above maximum UI width

 2. Targeting all Viewport Width Ranges up to, and including, the specified range:

    ```SASS
    @include max-viewport-width(medium) {
      -- your styles --
    }
    ```

    This will target viewport widths below, but not including, the upper bound
    of the "medium" Viewport Width Range

    By default, the above code would affect viewports 0px - 1023px wide:
    ✓ below minimum UI width
    ✓ tiny
    ✓ small
    ✓ medium
    ✘ large
    ✘ huge
    ✘ above maximum UI width

 3. Targeting a viewport-width range directly:

    ```SASS
    @include at-viewport-width(medium) {
      -- your styles --
    }
    ```

    This will target viewport widths at or above the lower bound, and below (but
    not including) the upper bound of the "medium" Viewport Width Range

    By default, the above code would affect viewports 768px - 1023px wide:
    ✘ below minimum UI
    ✘ tiny
    ✘ small
    ✓ medium
    ✘ large
    ✘ huge
    ✘ above maximum UI width

 4. Targeting all Viewport Width Ranges starting with the specified range and up:

    ```SASS
    @include min-viewport-width(medium) {
      -- your styles --
    }
    ```

    This will target viewport widths at or above the lower bound of the
    "medium" Viewport Width Range

    By default, the above code would affect viewports 768px - infinite wide:
    ✘ below minimum UI
    ✘ tiny
    ✘ small
    ✓ medium
    ✓ large
    ✓ huge
    ✓ above maximum UI width

 5. Targeting all Viewport Width Ranges above, but not including, the specified
    range:

    ```SASS
    @include above-viewport-width(medium) {
      -- your styles --
    }
    ```

    This will target viewport widths above the upper bound of the "medium"
    Viewport Width Range

    By default, the above code would affect viewports 1025px - infinite wide:
    ✘ below minimum UI
    ✘ tiny
    ✘ small
    ✘ medium
    ✓ large
    ✓ huge
    ✓ above maximum UI width

*/
// Mixins
// -----------------------------------------------------------------------------

/**
 * @mixin below-viewport-width()
 * Apply styling only at viewport widths below, but not including, the lower
 * bound of the specified range
 * @param {map-key} $specified-range
 * from ./config/breakpoints or custom theme file
 */
@mixin below-viewport-width($specified-range) {
  @if map-has-key($viewport-width-ranges, $specified-range) {
    $viewport-width-range: map-get($viewport-width-ranges, $specified-range);
    $lower-bound: map-get($viewport-width-range, lower-bound);

    @if unit($lower-bound) != 'px' {
      @if unit($lower-bound) == 'rem' {
        $lower-bound: rem-to-px($lower-bound);
      } @else {
        @warn '#{unit($lower-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    $max-width: ( $lower-bound - 1px );

    @media screen and (max-width: $max-width) {
      @content;
    }

  } @else {
    @warn 'Screen size range "#{$specified-range}" is not defined. Please add it to your configuration file.';
  }
}

/**
 * @mixin max-viewport-width()
 * Apply styling only at viewport widths below, but not including, the upper
 * bound of the specified range
 * @param {map-key} $specified-range
 * from ./config/breakpoints or custom theme file
 */
@mixin max-viewport-width($specified-range) {
  @if map-has-key($viewport-width-ranges, $specified-range) {
    $viewport-width-range: map-get($viewport-width-ranges, $specified-range);
    $upper-bound: map-get($viewport-width-range, upper-bound);

    @if unit($upper-bound) != 'px' {
      @if unit($upper-bound) == 'rem' {
        $upper-bound: rem-to-px($upper-bound);
      } @else {
        @warn '#{unit($upper-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    $max-width: ( $upper-bound - 1px );

    @media screen and (max-width: $max-width) {
      @content;
    }

  } @else {
    @warn 'Screen size range "#{$specified-range}" is not defined. Please add it to your configuration file.';
  }
}

/**
 * @mixin at-viewport-width()
 * Apply styling only at viewport widths at or above the lower bound
 * and below, but not including, the upper bound of the specified range
 * @param {map-key} $specified-range
 * from ./config/breakpoints or custom theme file
 */
@mixin at-viewport-width($specified-range) {

  @if map-has-key($viewport-width-ranges, $specified-range) {
    $viewport-width-range: map-get($viewport-width-ranges, $specified-range);

    $lower-bound: map-get($viewport-width-range, lower-bound);

    @if unit($lower-bound) != 'px' {
      @if unit($lower-bound) == 'rem' {
        $lower-bound: rem-to-px($lower-bound);
      } @else {
        @warn '#{unit($lower-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    $upper-bound: map-get($viewport-width-range, upper-bound);

    @if unit($upper-bound) != 'px' {
      @if unit($upper-bound) == 'rem' {
        $upper-bound: rem-to-px($upper-bound);
      } @else {
        @warn '#{unit($upper-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    // If $specified-range is the largest range available (the last key in
    // $viewport-width-ranges), subtract 1px
    $min-width: $lower-bound;
    $max-width: ( $upper-bound - 1px );

    @if index(map-keys($viewport-width-ranges), $specified-range) == length($viewport-width-ranges) {
      $max-width: $upper-bound;
    }

    @media screen and (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }

  } @else {
    @warn 'Screen size range "#{$specified-range}" is not defined. Please add it to your configuration file.';
  }

}

/** @mixin min-viewport-width()
 * Apply styling only at viewport widths at or above the lower bound of the
 * specified range
 * @param {map-key} $specified-range
 * from ./config/breakpoints or custom theme file
 */
@mixin min-viewport-width($specified-range) {
  @if map-has-key($viewport-width-ranges, $specified-range) {
    $viewport-width-range: map-get($viewport-width-ranges, $specified-range);
    $lower-bound: map-get($viewport-width-range, lower-bound);

    @if unit($lower-bound) != 'px' {
      @if unit($lower-bound) == 'rem' {
        $lower-bound: rem-to-px($lower-bound);
      } @else {
        @warn '#{unit($lower-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    $min-width: $lower-bound;

    @media screen and (min-width: $min-width) {
      @content;
    }

  } @else {
    @warn 'Screen size range "#{$specified-range}" is not defined. Please add it to your configuration file.';
  }
}

/**
 * @mixin above-viewport-width()
 * Apply styling only at viewport widths above the upper bound of the
 * specified range
 * @param {map-key} $specified-range
 * from ./config/breakpoints or custom theme file
 */
@mixin above-viewport-width($specified-range) {
  @if map-has-key($viewport-width-ranges, $specified-range) {
    $viewport-width-range: map-get($viewport-width-ranges, $specified-range);
    $upper-bound: map-get($viewport-width-range, upper-bound);

    @if unit($upper-bound) != 'px' {
      @if unit($upper-bound) == 'rem' {
        $upper-bound: rem-to-px($upper-bound);
      } @else {
        @warn '#{unit($upper-bound)} cannot be used as a unit for breakpoint values. Please use `rem` or `px` instead.';
      }
    }

    $min-width: ( $upper-bound + 1px );

    @media screen and (min-width: $min-width) {
      @content;
    }

  } @else {
    @warn 'Screen size range "#{$specified-range}" is not defined. Please add it to your configuration file.';
  }
}
