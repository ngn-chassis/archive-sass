@mixin global-typography-rules($upper-bound, $include-bottom-margin: false) {
  $root-font-size: get-font-size(root, $upper-bound);
  $root-line-height: get-line-height(root, $upper-bound);

  font-size: $root-font-size;
  line-height: $root-line-height;

  h1 {
    font-size: ( ( get-font-size($h1-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h1-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  h2 {
    font-size: ( ( get-font-size($h2-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h2-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  h3 {
    font-size: ( ( get-font-size($h3-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h3-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  h4 {
    font-size: ( ( get-font-size($h4-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h4-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  h5 {
    font-size: ( ( get-font-size($h5-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h5-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  h6 {
    font-size: ( ( get-font-size($h6-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($h6-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  legend {
    font-size: ( ( get-font-size($form-legend-font-size-alias, $upper-bound) / $root-font-size ) * 1em );
    line-height: ( ( get-line-height($form-legend-font-size-alias, $upper-bound) / $root-line-height ) * 1em );
  }

  // Container Elements
  section,
  nav,
  form {
    margin-bottom: ( ( get-line-height(root, $upper-bound) / get-font-size(root, $upper-bound) ) * $type-scale-ratio ) * 1em;
  }

  // Inner Elements
  section section,
  nav section,
  section nav,
  nav nav,
  article,
  p,
  fieldset,
  figure,
  pre,
  blockquote,
  table,
  canvas,
  embed {
    margin-bottom: ( get-line-height(root, $upper-bound) / get-font-size(root, $upper-bound) ) * 1em;
  }

  input,
  textarea {
    font-size: get-font-size(root, $upper-bound);
  }

  textarea {
    line-height: get-line-height(root, $upper-bound);
  }

}

// Used to set an element to a calculated golden-ratio font-size and line-height;
// Includes the ability to add a GR calculated margin as well
// params:
// { alias } string
// Possible values (from ./definitions):
// small, root, large, larger, largest
// { multiplier } int
// { has-margin }
// If true, calculated margin rule will be added
@mixin font-size($alias, $multiplier: 1, $has-margin: false) {

  @each $range-semantic-name, $range-bounds in $screen-size-ranges {

    $index: index(map-keys($screen-size-ranges), $range-semantic-name);
    $upper-bound: map-get($range-bounds, upper-bound);

    $font-size: ( get-font-size($alias, $upper-bound) * $multiplier );
    $line-height: ( get-line-height($alias, $upper-bound) * $multiplier );

    @if $index == 1 {
      @include max-screen-size($range-semantic-name) {
        font-size: $font-size;
        line-height: $line-height;

        @if $has-margin {
          margin-bottom: ( $line-height / get-font-size(root, $upper-bound) ) * 1em;
        }
      }
    } @elseif $index == length($screen-size-ranges) {
      @include min-screen-size($range-semantic-name) {
        font-size: $font-size;
        line-height: $line-height;

        @if $has-margin {
          margin-bottom: ( $line-height / get-font-size(root, $upper-bound) ) * 1em;
        }
      }
    } @else {
      @include at-screen-size($range-semantic-name) {
        font-size: $font-size;
        line-height: $line-height;

        @if $has-margin {
          margin-bottom: ( $line-height / get-font-size(root, $upper-bound) ) * 1em;
        }
      }
    }

  }
}

// Typography-based Layout Mixins ----------------------------------------------

// :: Inline Layout Rules
// Used to set margin, padding, and line-height on inline elements that are not
// just plain text. ie: buttons, form fields, tags, etc.
// Margin, padding and line-height are calculated using GR Typography rules

// $multi-line bool is for elements that are inline but contain multiple lines
// of text content, such as a textarea or a contentEditable container

@mixin inline-layout-rules($alias: root, $has-padding: true, $has-margin: true, $multi-line: false) {

  // TODO: Figure out whether this loop is actually necessary
  @each $range-semantic-name, $range-bounds in $screen-size-ranges {

    $index: index(map-keys($screen-size-ranges), $range-semantic-name);
    $upper-bound: map-get($range-bounds, upper-bound);

    $font-size: ((get-font-size($alias, $upper-bound) / get-font-size(root, $upper-bound)) * 1em );
    $base-line-height: ($font-size * $type-scale-ratio);

    @if not ( variable-exists(margin) ) and $has-margin {
      $margin: 0 ( $base-line-height / 2 ) $base-line-height 0;
      margin: $margin;
    }

    @if not ( variable-exists(padding) ) and $has-padding {

      @if $multi-line {
        $padding: ( ( ( $base-line-height * $type-scale-ratio ) - $base-line-height ) / 2 ) ( $base-line-height / 2 );
        padding: $padding;
      } @else {
        $padding: 0 ( $base-line-height / 2 );
        padding: $padding;
      }
    }

    @if $multi-line {
      line-height: $base-line-height;
    } @else {
      @if not variable-exists(adjusted-line-height) {
        $adjusted-line-height: ( $base-line-height * $type-scale-ratio );
        line-height: $adjusted-line-height;
      }
    }

  }

}


// :: Block Layout Rules
// Used to set margin, padding, and line-height on block elements
// Margin and padding are calculated using GR Typography rules

@mixin block-layout-rules($alias: root, $has-padding: true, $has-margin: true) {

  // TODO: Figure out whether this loop is actually necessary
  @each $range-semantic-name, $range-bounds in $screen-size-ranges {

    $index: index(map-keys($screen-size-ranges), $range-semantic-name);
    $upper-bound: map-get($range-bounds, upper-bound);

    $font-size: ((get-font-size($alias, $upper-bound) / get-font-size(root, $upper-bound)) * 1em );
    $line-height: ($font-size * $type-scale-ratio);

    @if not ( variable-exists(margin) ) and $has-margin {
      $margin: 0 0 $line-height 0;
      margin: $margin;
    }

    @if not ( variable-exists(padding) ) and $has-padding {
      $padding: ( ( $line-height / $type-scale-ratio ) / 2 ) 1em;
      padding: $padding;
    }

  }

}
