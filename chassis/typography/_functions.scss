// NGN Chassis
// Golden Ratio typography-base

// Select appropriate font-size for viewport-width-range.
// Compares current viewport-width upper-bound to Chassis typography defaults and
// returns the appropriate font-size

@function get-font-size($type, $upper-bound, $multiplier: $global-typography-multiplier) {
  $range-upper-bound: null;

  @if unit($upper-bound) == 'px' {
    $range-upper-bound: $upper-bound;
  } @else {
    @warn '`#{unit($upper-bound)}` cannot be used as units for breakpoint bounds. Please use `px` instead.';
  }

  $font-size: null;

  @each $font-size-def in $font-size-defs {
    $def-upper-bound: map-get($font-size-def, upper-bound);

    @if $range-upper-bound >= $def-upper-bound {
      $font-sizes: map-get($font-size-def, font-sizes);

      @each $font-size-alias, $font-size-value in $font-sizes {
        @if $type == $font-size-alias {
          @if unit($font-size-value) == 'px' {
            $font-size: $font-size-value;
          } @else {
            @warn '`#{unit($upper-bound)}` cannot be used as units for Chassis Typography plugin font size definitions. Please use `px` instead.';
          }
        }
      }
    }
  }

  @return ( $font-size * $multiplier );
}

@function get-line-height($type, $upper-bound, $multiplier: $global-typography-multiplier) {
  $font-size: get-font-size($type, $upper-bound);
  
  @return ( round($font-size * calculate-line-height($font-size, $upper-bound)) * $multiplier );
}

// @function get-line-height($type, $upper-bound, $multiplier: $global-typography-multiplier) {
//   @return ( round(get-font-size($type, $upper-bound) * $type-scale-ratio) * $multiplier );
// }

// The mixins below are used to set initial typography values for headings

@function get-initial-heading-font-size($alias, $first-upper-bound) {
  @return ( ( get-font-size($alias, $first-upper-bound) / get-font-size(root, $first-upper-bound) ) * 1em );
}

@function get-initial-heading-line-height($alias, $first-upper-bound) {
  @return ( ( get-line-height($alias, $first-upper-bound) / get-line-height(root, $first-upper-bound) ) * 1em );
}

@function get-initial-heading-margin-bottom($alias, $first-upper-bound) {
  @return ( ( get-line-height($alias, $first-upper-bound) / get-font-size($alias, $first-upper-bound) ) / $type-scale-ratio ) * 1em;
}

// NOTE: The following functions are experimental. They will form the basis of
// the upcoming auto-line-height features.

/**
 * @function get-optimal-line-dimensions
 * Return optimized line-height and width based on font-size and type-scale-ratio
 * @param {px} $font-size
 * @param {int} $ratio
 * Type scale ratio
 */
@function get-optimal-line-dimensions($font-size, $ratio) {
	$line-height-px: $font-size * $ratio;
	$line-height-ems: (((strip-units($font-size) * $ratio) / strip-units($font-size)) * 1em);
	
	@return (
		height: $line-height-ems,
		width: (strip-units($line-height-px) * strip-units($line-height-px) * 1px)
	);
}

/**
 * @function calculate-line-height
 * Returns adjusted line-height for a particular font-size and viewport-width-range
 * @param {px} $font-size
 * @param {px} $upper-bound
 * viewport-width-range upper bound
 */
@function calculate-line-height($font-size, $upper-bound) {
	$optimal-line: get-optimal-line-dimensions($font-size, $type-scale-ratio);
	
	@return ( $type-scale-ratio - ( ( 1 / ( 2 * $type-scale-ratio ) ) * ( 1 - ( $upper-bound / map-get($optimal-line, width) ) ) ) );
}

// @warn calculate-line-height(16px, 512px);
