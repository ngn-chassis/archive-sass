// NGN Chassis
// Helper Classes

// These classes can be injected with javascript

// Add !important to rules that absolutely must overwrite any other styles.
//------------------------------------------------------------------------------

.hidden {
	display: none !important;
	visibility: hidden !important;
	opacity: 0 !important;
}

// Limit width of a container to the min and max UI widths
// <div class="width-constraint"> should be placed inside elements that span the
// full width of the viewport to maintain proper UI dimensions

// For  elements that need to be constrained to the max UI width
// (e.g. inner containers on top-level elements, etc.)
.width-constraint {
	min-width: $ui-min-width !important;
	max-width: $ui-max-width !important;
	margin: 0 auto;
  padding: {
    left: $ui-gutter;
    right: $ui-gutter;
  }

	// Prevent vw padding from shrinking at screen sizes below minimum ui width
	@media screen and (max-width: $ui-min-width) {
		@if unit($ui-min-width) != 'rem' {
      @if unit($ui-min-width) == 'px' {
				padding: {
					left: round((strip-units($ui-min-width) * (strip-units($ui-gutter) / 100)) * 1px);
					right: round((strip-units($ui-min-width) * (strip-units($ui-gutter) / 100)) * 1px);
			  }
      } @else {
        @warn '#{unit($ui-min-width)} cannot be used as a unit for $ui-min-width. Please use rem or px instead.';
      }
    } @else {
			padding: {
				left: round(((strip-units($ui-min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);
				right: round(((strip-units($ui-min-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);
		  }
		}
	}

	// Prevent vw padding from enlarging at screen sizes above maximum ui width
	@media screen and (min-width: $ui-max-width) {
		@if unit($ui-max-width) != 'rem' {
      @if unit($ui-max-width) == 'px' {
				padding: {
					left: round((strip-units($ui-max-width) * (strip-units($ui-gutter) / 100)) * 1px);
					right: round((strip-units($ui-max-width) * (strip-units($ui-gutter) / 100)) * 1px);
			  }
      } @else {
        @warn '#{unit($ui-max-width)} cannot be used as a unit for $ui-max-width. Please use rem or px instead.';
      }
    } @else {
			padding: {
				left: round(((strip-units($ui-max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);
				right: round(((strip-units($ui-max-width) * strip-units($typography-base)) * (strip-units($ui-gutter) / 100)) * 1px);
		  }
		}
	}
}

@mixin width-constraint {
  @extend .width-constraint;
}
