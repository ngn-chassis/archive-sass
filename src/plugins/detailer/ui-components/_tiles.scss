// NGN Chassis
// UI Components

// :: Flex Tiles
// Creates a grid of equally-sizes, fluid and responsive tiles.

// Usage:
// Include the 'tiles' mixin on your containing element
// @param { $columns } int
// Number of columns in grid
// @param { $gutter-width } px or ems
// Amount of space between each tile

// TODO: Add ability to reverse the order of tiles, and display in columns
// instead of rows.

@mixin tiles($columns, $gutter-width: 1em) {

  @if variable-exists(CHASSIS_DETAILER_INCLUDED) and $CHASSIS_DETAILER_INCLUDED {

    // Automatically keep track of numbering
    counter-reset: CHASSIS_FLEX_TILE_COUNTER;

    > * {
      counter-increment: CHASSIS_FLEX_TILE_COUNTER;
    }

    @if $columns <= 1 {

      // If mixin is included and calls for one column or none, bypass the grid
      // functionality and display each tile as a block element
      display: block;

    } @else {

      display: flex;
      flex-wrap: wrap;
    	flex-direction: row;

    	> * {
        overflow: hidden;

        // Calculate percentage width of columns
        flex: 0 0 ((100 / $columns) * 1%);

        // Apply default padding
        // will be overwritten later for tiles on the outside edges of the grid
    		padding: 0 ($gutter-width / 2) $gutter-width;

        // gives the appearance of gutters between tiles when using a background
        // color or image
        background-clip: content-box !important;

        // ---------------------------------------------------------------------
        // Reset padding to default values each time tiles mixin is included
        // This allows for setting different numbers of columns in media queries
        // ie without this reset, the nth-child rules from previous media queries
        // would still apply due to the css cascade. This ensures that the tiles
        // mixin will overwrite any previous includes on the same element.

        // For all column quantities up to, but not including, the specified number:
    		@for $i from 0 to ($columns - 1) {

          // ...overwrite previously applied nth-child rules:
          // Overwrite Rules 1 and 2 below.
          &:nth-child(#{$i}n),
          &:nth-child(#{$i}n):last-child {
    				padding-right: ($gutter-width / 2);
    			}

          // Overwrite Rule 3 below
    			&:nth-child(#{$i}n + 1) {
    				padding-left: ($gutter-width / 2);
    			}

    		}

        // ---------------------------------------------------------------------

        // Last tile IF it is also an even multiple of the number of columns
        // This will keep the last child from having it's padding removed if it
        // is not at the outside edge of the grid.
        // for example, these rules will apply to the 6th of 6 items in a 3x3 grid of tiles
        // it will NOT apply to the 5th of 5 tiles in a 3x3 grid of tiles

        // Rule 1
        &:last-child:nth-child(#{$columns}n) {
    			padding-right: 0;
    		}

    		// The following allows for this default behavior:
    		// Once more than one row of grid items has been added, they will all
    		// align left by default. Until the first row is filled, items will
    		// display centered and spaced out to fill the whole column width

        // Rule 2
        // remove right padding on all tiles that are positioned on the outside
        // right edge of the grid
    		&:nth-child(#{$columns}n) {
    			padding-right: 0;
    		}

        // Rule 3
        // remove left padding on the next tile after each tile positioned on
        // the outside right edge of the grid
        // Because these tiles will have wrapped to the next row, this works out
        // to each tile on the left outside edge, excluding the very first tile.
    		&:nth-child(#{$columns}n + 1),
    		&:first-child:not(:only-child) {
    			padding-left: 0;
    		}

        // Rule 4
        // Arrange tiles horizontally centered in the grid container if:
        // ...there is only one tile left in a multi-column grid,
    		&:only-child,
        // ...there is only one row with one fewer tile than the number of
        // columns (ie 3 tiles in a 4-column grid).
    		&:nth-child(-n+#{$columns - 1}),
        // When those two conditions are true, add padding back onto the
        // first tile to make sure it maintains the same dimensions as the
        // other tiles.
        // TODO: Revisit the above description as it may not be entirely accurate.
    		&:first-child:nth-last-child(-n+#{$columns - 1}) {
          padding-left: ( $gutter-width / 2 );
    			margin-left: auto;
    			margin-right: auto;
    		}
    	}

    }

  }
}
